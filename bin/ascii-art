#!/usr/bin/env node
var argv;
var actor = require('../index.js');
var pkg = require('../package');
var artpkg = require('ascii-art/package');
var art = require('ascii-art');
var path = require('path');
var CLApp = require('app-term-kit');
var createRequireFromPath = require('module').createRequireFromPath;

var app = new CLApp('ascii-art', {
    copyright : 'Abbey Hawk Sparrow',
    trademark : 'Abbey Hawk Sparrow',
    copystart : '2019',
    //fslink : ':modules:/local-plugins',
    defaults : `{
    // defaults go here.
    "bitdepth": 2,
    //request-as-request, fetch-as-request, axios-as-request
    "requestlib": "request-as-request",
    "artwork": []
}`
});

//this assumes all plugins are artwork
app.on('plugins-installed', function(pluginList){
    app.config(function(err, config, save){
        pluginList.forEach(function(pluginName){
            if(pluginName.indexOf('ascii-art-source-' !== -1)){
                // ascii-art-source-blah -> blah
                config.artwork.push(pluginName.substring(17))
            }
        });
        save(config, function(){
            console.log('enabled plugins', config.artwork);
        });
    }, true);
});

var dirs = {};

app.config(function(err, conf, writeConfig){
    if(conf.autogenerated){
        delete conf.autogenerated;
        writeConfig(conf, function(){
            console.log('CONF WRITTEN')
        })
    }
    art.use('artwork', require('ascii-art/artwork'));
    if(conf.requestlib) art.use('request', require(conf.requestlib));
    art.font('ascii-art', 'Doom', function(err, value){
        art.font('Abbey Hawk Sparrow', 'u:script', function(err, sig){
            app.command({
                name:'image',
                description: 'convert an image to ascii',
                examples: [[
                    '$0 image foo.jpg ',
                    'output foo.jpg as inline ascii text'
                ]],
                action : function(argv, target, complete){
                    argv.target = target;
                    actor.performAction('image', argv, function(){
                        console.log('DONE');
                        complete();
                    });
                }
            });
                app.argument(
                    'color-distance', 'string',
                    'algorithm (or combination) for distance between colors', 1,
                    [
                        'euclideanDistance',
                        'classic',
                        'ratioDistance',
                        'classicByValue',
                        'CIE76Difference',
                        'closestByIntensity',
                        'rankedChannel',
                        'simple',
                        'minDeviation',
                        'luminosity',
                        'saturation',
                        'hue',
                        'original'
                    ]
                );
                app.argument(
                    'alphabet', 'string',
                    'the alphabet to use rendering the image', 1,
                    [
                        'variant1',
                        'variant2',
                        'variant3',
                        'variant4',
                        'ultra-wide',
                        'wide',
                        'hatching',
                        'bits',
                        'binary',
                        'greyscale',
                        'blocks',
                        'solid'
                    ]
                );
                app.argument(
                    'bit-depth', 'string',
                    'bit-depth to use for color', 1,
                    [4, 8, 32], 'B'
                );
                app.argument(
                    'threshold', 'number',
                    'the threshold for drawing edges', 1
                );
                app.argument(
                    'floor', 'number',
                    'the floor of the threshold for drawing edges', 1
                );
                app.argument(
                    'posterize', 'boolean',
                    'threshold to find edges for lights and darks', 0
                );
                app.argument(
                    'blended', 'boolean',
                    'merge render modes', 0
                );
                app.argument(
                    'lineart', 'string',
                    'subpixel lines using block characters', 1
                );
                app.argument(
                    'stipple', 'string',
                    'subpixel drawing using braille characters', 1
                );

            app.command({
                name:'text',
                description: 'add styles and/or font rendering to text',
                examples: [
                    [
                        '$0 text -F Doom "Some Titles"',
                        '"Some Titles" in the Doom font'
                    ],[
                        '$0 text -s red+bold "Some Titles"',
                        'bolded "Some Titles" in red'
                    ]
                ],
                action : function(argv, target, complete){
                    argv.target = target;
                    actor.performAction('text', argv, function(){
                        console.log('DONE');
                        complete();
                    });
                }
            });
                app.argument(
                    'font', 'string',
                    'the flf font to render the text in', 1,
                    null, 'F'
                );
                app.argument(
                    'style', 'string',
                    'the styles to render the text in', 1
                );
                app.argument(
                    'global', 'string',
                    'install the font globally', 1
                );

            app.command({
                name: 'art',
                description: 'get some ascii art from various sites',
                examples: [
                    [
                        '$0 art textfiles.com ',
                        'groupings from "textfiles.com"'
                    ],[
                        '$0 art textfiles.com/RAZOR ',
                        'files in "/RAZOR" on "textfiles.com"'
                    ],[
                        '$0 art textfiles.com/art/dragon.txt ',
                        'request file "dragon.txt" (in the group "art") from "textfiles.com"'
                    ]
                ],
                action : function(argv, target, complete){
                    argv.target = target;
                    actor.performAction('art', argv, function(){
                        console.log('DONE');
                        complete();
                    });
                }
            });
            app.command({
                name: 'font',
                description: 'work with an .flf( install )',
                examples: [
                    [
                        '$0 font install Font.flf ',
                        'install a figlet font'
                    ],[
                        '$0 font install weird',
                        'install weird.flf into "/Fonts"'
                    ],[
                        '$0 font install weird -g',
                        'install weird.flf globally'
                    ]
                ],
                action : function(argv, target, complete){
                    argv.subaction = target;
                    if(argv._.length){
                        argv.target = argv._.shift();
                    }
                    actor.performAction('install', argv, function(){
                        complete();
                    });
                }
            });
            /*
            //let's pipe!
            if(!process.stdin.isTTY){
                var BUFSIZE = 65536;
                let nbytes = 0;
                let chunks = [];
                let buffer = '';

                while(true){
                  try{
                    buffer = Buffer.alloc(BUFSIZE);
                    nbytes = fs.readSync(0, buffer, 0, BUFSIZE, null);
                  }catch(e){ if(e.code != 'EAGAIN') throw e };
                  if (nbytes === 0) break;
                  chunks.push(buffer.slice(0, nbytes));
                };
                var stdin = Buffer.concat(chunks).toString();
                if(stdin){
                  process.clPipe = stdin.trim();
                }
            }
            */
            app.useable(function(){ //allow setting of var in config on CL
                app.plugins({
                    artwork: { prefix : 'ascii-art-source-' }
                }, function(err, config, loadPlugins, requirePlusAAInternal){
                    if(err) return console.log('Error', err);
                    var sourceList = [];
                    var failedSources = [];
                    var sources = {};
                    //*
                    conf.artwork.forEach(function(source){
                        if(conf.artwork.indexOf(source) === -1) sourceList.push(source);
                        try{
                            var rtrn = requirePlusAAInternal('ascii-art-source-'+source);
                            sources[source] = rtrn;
                            art.Artwork.addSource(rtrn);
                            sources[source] = rtrn;
                            sourceList.push(source);
                        }catch(ex){
                            failedSources.push(source);
                        }
                    });
                    loadPlugins('*', function(err, plugins, pluginObjects){
                        var pluginStatus;
                        var pluginNames;
                        if(err){
                            pluginStatus = 'No plugins found.';
                            pluginNames = [];
                        }else{
                            //TODO: look for missing plugins in plugins
                            pluginStatus = (
                                sourceList.length?
                                sourceList.join(', '):
                                'N/A'
                            );
                            pluginNames = Object.keys(plugins.artwork);
                        }
                        if(failedSources.length){
                            pluginStatus += "\n\nPlugins(failed): \n    "+failedSources.join(', ')
                        }
                        //app.defaultPluginDir();
                        app.help();
                        app.header(
                            actor.style(value, 'yellow')
                                .slice(0,-5)+'\033[39m  v'+artpkg.version+"\n"+
                                '                                              '
                                +'tools v'+pkg.version+"\n"+
                            'Plugins:'+"\n"+'    '+pluginStatus+"\n"
                        );
                        app.footer();
                        app.run(function(ex){
                            console.log(ex);
                        });
                    });
                });
            });
        });
    });
}, true);
